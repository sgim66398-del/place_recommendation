"use client";

import { useState } from 'react';
import Image from "next/image";

// 장소 데이터 모델
interface Place {
  id: number;
  name: string;
  category: string;
  location: string;
  description: string;
  reviews: Review[];
}

// 후기 데이터 모델
interface Review {
  id: number;
  user: string;
  rating: number;
  text: string;
  photoUrl: string;
  trustScore: number;
}

// 추천 알고리즘: 각 장소의 후기 신뢰도와 평점 평균을 계산하여 상위 2개 추천
type ScoredPlace = Place & { avgTrust: number; avgRating: number; score: number };

function getRecommendedPlaces(reviews: Record<number, Review[]>, places: Place[]): ScoredPlace[] {
  // 각 장소별 신뢰도 평균과 평점 평균 계산
  const scored: ScoredPlace[] = places.map(place => {
    const placeReviews = reviews[place.id] || [];
    const avgTrust = placeReviews.length > 0 ? placeReviews.reduce((sum, r) => sum + r.trustScore, 0) / placeReviews.length : 0;
    const avgRating = placeReviews.length > 0 ? placeReviews.reduce((sum, r) => sum + r.rating, 0) / placeReviews.length : 0;
    return {
      ...place,
      avgTrust,
      avgRating,
      score: avgTrust * 0.7 + avgRating * 20 * 0.3, // 신뢰도 70%, 평점 30% 가중치
    };
  });
  // 점수 기준 상위 2개 추천
  return scored.sort((a, b) => b.score - a.score).slice(0, 2);
}

// 샘플 데이터
const samplePlaces: Place[] = [
  {
    id: 1,
    name: "숨은카페",
    category: "카페",
    location: "서울 강남구",
    description: "조용하고 분위기 좋은 숨은 카페",
    reviews: [
      {
        id: 1,
        user: "userA",
        rating: 5,
        text: "직접 가보니 정말 조용하고 커피가 맛있어요!",
        photoUrl: "/file.svg",
        trustScore: 95,
      },
      {
        id: 2,
        user: "userB",
        rating: 4,
        text: "광고와 다르게 진짜 분위기가 좋아요.",
        photoUrl: "/globe.svg",
        trustScore: 90,
      },
    ],
  },
  {
    id: 2,
    name: "골목식당",
    category: "식당",
    location: "서울 마포구",
    description: "현지인 추천 골목식당",
    reviews: [
      {
        id: 3,
        user: "userC",
        rating: 5,
        text: "숨은 맛집이에요. 가성비 최고!",
        photoUrl: "/window.svg",
        trustScore: 85,
      },
    ],
  },
  {
    id: 3,
    name: "도심정원",
    category: "카페",
    location: "서울 용산구",
    description: "도심 속 작은 정원",
    reviews: [],
  },
];

export default function Page() {
  // 상태 관리
  const [reviews, setReviews] = useState<Record<number, Review[]>>(() => {
    const initial: Record<number, Review[]> = {};
    samplePlaces.forEach(place => {
      initial[place.id] = place.reviews;
    });
    return initial;
  });
  const [error, setError] = useState<string>("");
  const [text, setText] = useState<string>("");
  const [user, setUser] = useState<string>("");
  const [rating, setRating] = useState<number>(5);
  const [photoUrl, setPhotoUrl] = useState<string>("");
  const [selectedPlaceId, setSelectedPlaceId] = useState<number>(1);
  const [isWritingReview, setIsWritingReview] = useState<boolean>(false);

  // 신뢰도 점수 계산 함수
  const calculateTrustScore = (review: Omit<Review, 'id' | 'trustScore'>): number => {
    let score = 60; // 기본 점수

    // 텍스트 길이 기반 점수 (최대 20점)
    const textScore = Math.min(review.text.length / 10, 20);
    score += textScore;

    // 사진 첨부 점수 (10점)
    if (review.photoUrl) score += 10;

    // 평점의 신뢰도 (극단적 평점은 약간의 감점)
    const ratingPenalty = Math.abs(3 - review.rating) * 2;
    score = Math.max(0, score - ratingPenalty);

    return Math.round(score);
  };

  // 후기 추가 처리
  const handleAddReview = (event: React.FormEvent) => {
    event.preventDefault();

    if (!user) {
      setError("닉네임을 입력해주세요.");
      return;
    }

    if (!text) {
      setError("후기 내용을 입력해주세요.");
      return;
    }

    if (text.length < 10) {
      setError("후기는 최소 10자 이상 작성해주세요.");
      return;
    }

    const newReview: Review = {
      id: Date.now(),
      user,
      rating,
      text,
      photoUrl,
      trustScore: calculateTrustScore({ user, rating, text, photoUrl }),
    };

    setReviews(prev => ({
      ...prev,
      [selectedPlaceId]: [...(prev[selectedPlaceId] || []), newReview],
    }));

    setError("");
    setUser("");
    setRating(5);
    setText("");
    setPhotoUrl("");
    setIsWritingReview(false);
  };

  // 추천 장소 계산
  const recommended = getRecommendedPlaces(reviews, samplePlaces);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* 상단 헤더 */}
      <header className="fixed top-0 left-0 right-0 bg-white z-10 border-b border-gray-100">
        <div className="max-w-xl mx-auto px-4 py-3">
          <h1 className="text-xl font-bold">장소추천</h1>
        </div>
      </header>

      {/* 메인 컨텐츠 */}
      <div className="pt-14 pb-20 max-w-xl mx-auto px-4">
        {/* 상단 검색바 */}
        <div className="mb-6 flex items-center justify-between">
          <input 
            type="text" 
            placeholder="📍 장소 검색하기" 
            className="w-full bg-gray-100 px-4 py-3 rounded-2xl text-sm focus:outline-none"
          />
        </div>

        {/* 탭 네비게이션 */}
        <nav className="flex items-center gap-6 mb-6 border-b border-gray-100">
          <button className="pb-3 text-blue-500 border-b-2 border-blue-500 font-medium">추천</button>
          <button className="pb-3 text-gray-500">리뷰</button>
          <button className="pb-3 text-gray-500">찜</button>
        </nav>

        {/* 추천 장소 섹션 */}
        <section className="space-y-4">
          {recommended.map(place => (
            <article key={place.id} className="bg-white rounded-2xl p-4 shadow-sm">
              <div className="flex items-start gap-4">
                <div className="w-20 h-20 bg-gray-100 rounded-xl flex items-center justify-center text-blue-500">
                  <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <div className="flex items-start justify-between">
                    <div>
                      <h3 className="font-semibold text-gray-900">{place.name}</h3>
                      <p className="text-sm text-gray-500">{place.category} • {place.location}</p>
                    </div>
                    <div className="flex items-center gap-1 bg-blue-50 px-2 py-1 rounded-lg">
                      <span className="text-blue-600 text-sm font-medium">{place.avgRating.toFixed(1)}</span>
                      <svg className="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">{place.description}</p>
                  <div className="mt-3 flex items-center gap-2">
                    <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-lg">#실제후기</span>
                    <span className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded-lg">#{place.category}</span>
                  </div>
                </div>
              </div>
              <div className="mt-4 pt-3 border-t border-gray-100">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="flex items-center text-sm text-gray-500">
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                      </svg>
                      {(reviews[place.id] || []).length}
                    </div>
                    <div className="flex items-center text-sm text-gray-500">
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                      0
                    </div>
                  </div>
                  <button className="text-blue-500 font-medium text-sm">자세히 보기</button>
                </div>
              </div>
            </article>
          ))}
        </section>

        {/* 후기 작성 버튼 */}
        <button 
          onClick={() => setIsWritingReview(!isWritingReview)}
          className="fixed bottom-24 right-4 bg-blue-500 text-white rounded-full p-4 shadow-lg"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
        </button>

        {/* 하단 네비게이션 */}
        <nav className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-100">
          <div className="max-w-xl mx-auto px-4 py-3">
            <div className="flex items-center justify-around">
              <button className="flex flex-col items-center gap-1">
                <svg className="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                </svg>
                <span className="text-xs text-gray-600">홈</span>
              </button>
              <button className="flex flex-col items-center gap-1">
                <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                <span className="text-xs text-gray-600">검색</span>
              </button>
              <button className="flex flex-col items-center gap-1">
                <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                <span className="text-xs text-gray-600">프로필</span>
              </button>
            </div>
          </div>
        </nav>

        {/* 후기 작성 모달 */}
        {isWritingReview && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end z-50">
            <div className="bg-white w-full rounded-t-3xl p-6 animate-slide-up">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold">후기 작성</h2>
                <button onClick={() => setIsWritingReview(false)} className="text-gray-500">
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>

              <form onSubmit={handleAddReview} className="space-y-4">
                <select 
                  value={selectedPlaceId} 
                  onChange={e => setSelectedPlaceId(Number(e.target.value))}
                  className="w-full bg-gray-100 rounded-xl px-4 py-3 text-gray-800"
                >
                  {samplePlaces.map(place => (
                    <option key={place.id} value={place.id}>{place.name}</option>
                  ))}
                </select>

                <div className="flex gap-3">
                  <input
                    type="text"
                    placeholder="닉네임"
                    value={user}
                    onChange={e => setUser(e.target.value)}
                    className="flex-1 bg-gray-100 rounded-xl px-4 py-3"
                  />
                  <input
                    type="number"
                    min={1}
                    max={5}
                    placeholder="평점"
                    value={rating}
                    onChange={e => setRating(Number(e.target.value))}
                    className="w-24 bg-gray-100 rounded-xl px-4 py-3"
                  />
                </div>

                <input
                  type="text"
                  placeholder="사진 파일명 (예: file.svg)"
                  value={photoUrl}
                  onChange={e => setPhotoUrl(e.target.value)}
                  className="w-full bg-gray-100 rounded-xl px-4 py-3"
                />

                <textarea
                  placeholder="방문 후기를 작성해주세요"
                  value={text}
                  onChange={e => setText(e.target.value)}
                  className="w-full bg-gray-100 rounded-xl px-4 py-3"
                  rows={4}
                />

                {error && (
                  <div className="text-red-500 text-sm px-1">
                    {error}
                  </div>
                )}

                <div className="flex gap-3">
                  <button
                    type="button"
                    onClick={() => setIsWritingReview(false)}
                    className="flex-1 py-3 rounded-xl border border-gray-200 text-gray-600 font-medium"
                  >
                    취소
                  </button>
                  <button
                    type="submit"
                    className="flex-1 bg-blue-500 text-white py-3 rounded-xl font-medium"
                  >
                    등록하기
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
